'''
Business: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º –≤ Telegram
Args: event - dict —Å httpMethod
      context - –æ–±—ä–µ–∫—Ç —Å request_id, function_name
Returns: HTTP response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
'''
import json
import os
import urllib.request
from typing import Dict, Any, List
from datetime import datetime, timedelta
import psycopg2

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    database_url = os.environ.get('DATABASE_URL')
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    if not database_url or not bot_token or not chat_id:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Missing configuration'})
        }
    
    conn = psycopg2.connect(database_url)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    cursor.execute(
        "SELECT visit_date, visit_count FROM daily_visits ORDER BY visit_date DESC LIMIT 7"
    )
    stats = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
    cursor.execute("SELECT visit_count FROM site_visits WHERE id = 1")
    total_result = cursor.fetchone()
    total_visits = total_result[0] if total_result else 0
    
    cursor.close()
    conn.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å–∞–π—Ç–∞\n\n"
    message += f"üî¢ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {total_visits}\n\n"
    message += "üìÖ –ü–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):\n"
    
    if stats:
        for date, count in stats:
            formatted_date = date.strftime('%d.%m.%Y')
            message += f"‚Ä¢ {formatted_date}: {count} –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
    else:
        message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    telegram_url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    data = json.dumps({
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }).encode('utf-8')
    
    req = urllib.request.Request(
        telegram_url,
        data=data,
        headers={'Content-Type': 'application/json'},
        method='POST'
    )
    
    with urllib.request.urlopen(req, timeout=10) as response:
        response.read()
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({'success': True, 'message': 'Stats sent to Telegram'})
    }
